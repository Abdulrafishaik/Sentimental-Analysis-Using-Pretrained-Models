# -*- coding: utf-8 -*-
"""Sentmental_Analysis_Pretrained_Models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SYn498x4z0q4xndQc6mAkjMDmTfOCTXm
"""

!pip install transformers --quiet

!pip install gradio --quiet

from transformers import pipeline
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import gradio as gr

sentimental=pipeline("text-classification", model="Achar/NLP-Sentimental-Analysis-using-DistilBERT-ModeL")

label_mapping={"LABEL_0":"Negative",
               "LABEL_1":"Positive"}
print(label_mapping)

result=sentimental("Hello i am going to Guntur to enjoy with my family")
result1=label_mapping[result[0]["label"]]
print(f'The sentiment is : {result1} and the score is : {result[0]["score"]}')

new_data=[]
text=["Hello i am going to Guntur to enjoy with my family",
    "I am feeling very sad today.",
    "This project is amazing and I am very happy with it!",
    "The weather is terrible today, I hate it."]
for texts in text:
  result=sentimental(texts)
  sentiment=label_mapping[result[0]["label"]]
  score=result[0]["score"]
  new_data.append({"sentence":texts,
                   "sentiment":sentiment,
                   "score":score})
data=pd.DataFrame(new_data)

data.to_csv("Sentimental_results.csv", index=False)

data

new_data1={"sentence":"Hello i am going to change my hostel because the hostel is not good ",
          "sentiment" : "Negative",
          "score":0.90}

data1=pd.DataFrame([new_data1])

data1

final_data=pd.concat([data,data1],ignore_index=True)

final_data

plt.figure(figsize=(6,5))
sns.countplot(data=final_data,x="sentiment",palette="Set2")
# Set the background color of the plot
plt.show()

human_read={"LABEL_0":"Negative",
            "LABEL_1":"Positive"}
sentimental=pipeline("text-classification", model="Dmyadav2001/Sentimental-Analysis")
def predictive_model(texts):
  result=sentimental(texts)
  sentiment=human_read[result[0]["label"]]
  score=result[0]["score"]
  return sentiment, score

interface=gr.Interface(fn=predictive_model,
                      inputs="text",
                      outputs=["text","number"],
                      title="Sentiment-Analysis-App",
                      description="Gave your text my machine is going to detect Positive / Negative "
                      )
interface.launch()

